// types.ts should exclusively contain typescript types and no runtime js code.
// that way it is safe to import/export for consumers
// without accidentally including browser code via tree-shaking.

import type { Size, Vec2 } from "../coreTypes/mod";

export type AtlasCoords = TextureRegion & {
  atlasIndex: number;
};

/**
 * A TextureRegion is a region of the texture atlas in normalized texels.
 *
 * It is a combination of a UvRegion and a cropOffset.
 */
export type TextureRegion = UvRegion & {
  /** the offset from the top left of the texture in texels to begin drawing */
  cropOffset: Vec2;
  /** the original size of the texture in texels */
  originalSize: Size;
};

/**
 * A UvRegion is a region of the texture atlas in normalized texels.
 */
export type UvRegion = {
  /**
   * The offset of the UVs in normalized texels. Relative to the un-cropped texture.
   *
   * @example
   *
   * { x: 10 / 4096, y: 10 / 4096 }
   */
  uvOffset: Vec2;
  /**
   * The scale of the UVs in normalized texels. Derived from the width and height of the un-cropped texture.
   *
   * @example
   *
   * { width: 1 / 4096, height: 1 / 4096 }
   */
  uvScale: Size;
  /**
   * The scale of the UVs in normalized texels. Derived from the width and height of the cropped texture.
   *
   * @example
   *
   * { width: 1 / 4096, height: 1 / 4096 }
   */
  uvScaleCropped?: Size;
};

/**
 * A CpuTextureAtlas is a texture atlas that has been loaded into memory.
 *
 * It contains the texture and a map of texture ids to TextureRegions.
 */
export type CpuTextureAtlas = {
  texture: ImageBitmap;
  textureRegions: Map<string, TextureRegion>;
};

/**
 * A TextureWithMetadata is a texture that has been loaded into the gpu.
 *
 * It contains the gpu texture data and a cropOffset and originalSize for use with cropped textures.
 */
export type TextureWithMetadata = {
  texture: GPUTexture;
  /** crop offset from center in texel units */
  cropOffset: Vec2;
  /** original size in texel units before cropping */
  originalSize: Size;
};

/** A definition for a pre-baked texture atlas */
export type AtlasDef =
  | {
      /** The url of the atlas png file, if empty the png is assumed to be next to the json file */
      png?: URL;
      /** The url of the atlas json file, if empty the json is assumed to be next to the png file */
      json: URL;
    }
  | {
      /** The url of the atlas png file, if empty the png is assumed to be next to the json file */
      png: URL;
      /** The url of the atlas json file, if empty the json is assumed to be next to the png file */
      json?: URL;
    };

/** Bundle options for registering multiple individual textures */
export type TextureBundleOpts = {
  /**
   * A record of texture ids and URLs.
   * ids must be unique within a bundle
   *
   */
  textures: Record<string, URL>;

  /**
   * Whether the image should be cropped down to the minimal bounding box for non-transparent pixels.
   *
   * See [Transparent Pixel Cropping](https://toodle.gg/f849595b3ed13fc956fc1459a5cb5f0228f9d259/examples/transparent-cropping.html) for more information.
   */
  cropTransparentPixels?: boolean;
  /**
   * Whether the bundle should be loaded automatically on registration
   */
  autoLoad?: boolean;
};

/** Bundle options for registering pre-generated texture atlases */
export type AtlasBundleOpts = {
  /**
   * atlas definitions as pregenerated by a texture packer like https://github.com/pixijs/assetpack
   *
   * @example
   *
   * [
   *   {
   *     json: new URL('https://example.com/atlas.json'),
   *   },
   *   {
   *     png: new URL('https://example.com/atlas.png'),
   *   },
   *   {
   *     json: new URL('https://example.com/metadata/atlas.json'),
   *     png: new URL('https://example.com/images/atlas.png'),
   *   },
   * ]
   */
  atlases: AtlasDef[];

  /**
   * Whether the bundle should be loaded automatically on registration
   */
  autoLoad?: boolean;
};

/**
 * A texel region defines a subregion of an individual texture in texel units.
 *
 * (0,0) is the top left corner of the original texture.
 * (width, height) is the bottom right corner of the original texture.
 *
 * @example
 * This is useful for something like spritesheet animations,
 * for eg a 3-frame pose of a 32x32 character sprite might be 96x32 texels, and the animation could
 * be done by alternating between:
 *
 * { x: 0, y: 0, width: 32, height: 32 }
 * { x: 32, y: 0, width: 32, height: 32 }
 * { x: 64, y: 0, width: 32, height: 32 }
 *
 */
export type TexelRegion = {
  x: number;
  y: number;
  width: number;
  height: number;
};

/** A region specification from a pixi.js spritesheet or atlas paced with assetPack */
export type PixiRegion = {
  frame: { x: number; y: number; w: number; h: number };
  rotated: boolean;
  trimmed: boolean;
  sourceSize: { w: number; h: number };
  spriteSourceSize: { x: number; y: number; w: number; h: number };
};
