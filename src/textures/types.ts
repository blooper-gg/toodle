// types.ts should exclusively contain typescript types and no runtime js code.
// that way it is safe to import/export for consumers
// without accidentally including browser code via tree-shaking.

import type { Size, Vec2 } from "../coreTypes/mod";

export type AtlasCoords = TextureRegion & {
  atlasIndex: number;
};

export type TextureRegion = UvRegion & {
  /** the offset from the top left of the texture in texels to begin drawing */
  drawOffset: Vec2;
  /** the original size of the texture in texels */
  originalSize: Size;
};

export type UvRegion = {
  /**
   * The offset of the UVs in normalized texels. Relative to the un-cropped texture.
   *
   * @example
   *
   * { x: 10 / 4096, y: 10 / 4096 }
   */
  uvOffset: Vec2;
  /**
   * The scale of the UVs in normalized texels. Derived from the width and height of the un-cropped texture.
   *
   * @example
   *
   * { width: 1 / 4096, height: 1 / 4096 }
   */
  uvScale: Size;
  /**
   * The scale of the UVs in normalized texels. Derived from the width and height of the cropped texture.
   *
   * @example
   *
   * { width: 1 / 4096, height: 1 / 4096 }
   */
  uvScaleCropped?: Size;
};

export type CpuTextureAtlas = {
  texture: ImageBitmap;
  textureRegions: Map<string, TextureRegion>;
};

export type TextureWithMetadata = {
  texture: GPUTexture;
  /** draw offset from center in texel units */
  drawOffset: Vec2;
  /** original size in texel units before cropping */
  originalSize: Size;
};

export type AtlasDef = {
  json: URL;
  png: URL;
};

/** Bundle options for registering multiple individual textures */
export type TextureBundleOpts = {
  /**
   * A record of texture ids and URLs.
   * ids must be unique within a bundle
   *
   */
  textures: Record<string, URL>;

  /**
   * Whether the image should be cropped down to the minimal bounding box for non-transparent pixels.
   *
   * See [Transparent Pixel Cropping](https://toodle.gg/f849595b3ed13fc956fc1459a5cb5f0228f9d259/examples/transparent-cropping.html) for more information.
   */
  cropTransparentPixels?: boolean;
  /**
   * Whether the bundle should be loaded automatically on registration
   */
  autoLoad?: boolean;
};

/** Bundle options for registering pre-generated texture atlases */
export type AtlasBundleOpts = {
  /**
   * atlas definitions as pregenerated by a texture packer like https://github.com/pixijs/assetpack
   *
   * @example
   *
   * {
   *   json: new URL('https://example.com/atlas.json'),
   *   png: new URL('https://example.com/atlas.png'),
   * }
   */
  atlases: AtlasDef[];

  /**
   * Whether the bundle should be loaded automatically on registration
   */
  autoLoad?: boolean;
};

/** A region specification from a pixi.js spritesheet or atlas paced with assetPack */
export type PixiRegion = {
  frame: { x: number; y: number; w: number; h: number };
  rotated: boolean;
  trimmed: boolean;
  sourceSize: { w: number; h: number };
  spriteSourceSize: { x: number; y: number; w: number; h: number };
};
